AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  vpcCIDR:
    Type: String
    Description: cidr block for the vpc (and subnet)
    Default: 10.5.0.0/16
  gitlabRootPassword:
    Type: String
    Default: Password123!
  hostedZoneId:
    Type: String
    Description: Id of the doamin hosted zone. - leave blank to omit
    Default: ''
  domainName: #example.co.uk
    Type: String
    Description: name of domain registered in route 53. e.g. example.com - leave blank to omit
    Default: ''
  subDomainName:
    Type: String
    Description: name of sub domain. - leave blank to omit
    Default: gitlab
  domainCertArn:
    Type: String
    Description: certificate of domain registered in route 53. must cover the given domain name/ sub domain name. - leave blank to omit
    Default: ''
  
Conditions:
  IsDomainConfiguredCondition:
    !And
      - !Not [!Equals [!Ref hostedZoneId, '']]
      - !Not [!Equals [!Ref domainName, '']]
      - !Not [!Equals [!Ref subDomainName, '']]
      - !Not [!Equals [!Ref domainCertArn, '']]
  
Resources:
  gitlabInstanceRole: #This determines what can be done inside the EC2 instance
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-gitlabInstanceRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-role-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "ssm:SendCommand"
                Resource: "*"
              - Effect: Allow
                Action: "s3:PutObject"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "events:PutTargets"
                  - "events:DescribeRule"
                  - "events:PutRule"
                Resource: "*"
              - Effect: Allow
                Action: "cloudformation:DescribeStacks"
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
  
  backupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-backups"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      NotificationConfiguration: # send events to eventbridge
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      #LifecycleConfiguration:
      #  Rules:
      #    - Id: rule0
      #      Status: Enabled
      #      ExpirationInDays: 1
      #      NoncurrentVersionExpiration:
      #        NoncurrentDays: 1
    DeletionPolicy: Delete
  
  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub "${AWS::StackName}-profile"
      Path: /
      Roles: 
        - !Ref gitlabInstanceRole
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-InternetGateway"
  
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref EC2vpc
  
  networkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref EC2vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-networkAcl"
  
  ACLInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref networkAcl
      RuleNumber: 100
      Egress: false # outgoing
      Protocol: -1 # according to this list https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      #PortRange:
      #  From: 22
      #  To: 22

  ACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref networkAcl
      RuleNumber: 100
      Egress: true # outgoing
      Protocol: -1 # according to this list https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  
  subnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetB
      NetworkAclId: !Ref networkAcl
  
  subnetCNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetC
      NetworkAclId: !Ref networkAcl
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EC2vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicRouteTable"
  
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - VPCGatewayAttachment
  
  subnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref subnetB
  
  subnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref subnetC
  
  EC2vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"
  
  subnetB:
    Type: AWS::EC2::Subnet
    Properties:
      #CidrBlock: !GetAtt EC2vpc.CidrBlock # 10.3.0.0/16
      CidrBlock: !Select [1, !Cidr [ !GetAtt EC2vpc.CidrBlock, 3, 8 ]] # 10.3.2.0/24
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref "AWS::Region"]
      VpcId: !Ref EC2vpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnetB"
  
  subnetC:
    Type: AWS::EC2::Subnet
    Properties:
      #CidrBlock: !GetAtt EC2vpc.CidrBlock # 10.3.0.0/16
      CidrBlock: !Select [2, !Cidr [ !GetAtt EC2vpc.CidrBlock, 3, 8 ]] # 10.3.2.0/24
      AvailabilityZone: !Select [2, Fn::GetAZs: !Ref "AWS::Region"]
      VpcId: !Ref EC2vpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnetC"
  
  instanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: !Sub "${AWS::StackName}-SecurityGroup description"
      GroupName: !Sub "${AWS::StackName}-SecurityGroup"
      VpcId: !Ref EC2vpc
      SecurityGroupIngress:
        - IpProtocol: tcp #SSH
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - FromPort: 80 #HTTP
          ToPort: 80
          IpProtocol: tcp
          #CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: !Ref LBSecurityGroup
        - FromPort: 443 #HTTPS
          ToPort: 443
          IpProtocol: tcp
          #CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: !Ref LBSecurityGroup
        - FromPort: 9418 #gitlab
          ToPort: 9418
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-instanceSecurityGroup"
  
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: !Sub "${AWS::StackName}-SecurityGroup description"
      GroupName: !Sub "${AWS::StackName}-LBSecurityGroup"
      VpcId: !Ref EC2vpc
      SecurityGroupIngress:
        - FromPort: 80 #HTTP
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 443 #HTTPS
          ToPort: 443
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-LBSecurityGroup"
  
  demoKey:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Sub "${AWS::StackName}-keyPair"
      KeyType: rsa
      PublicKeyMaterial: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDX72ggwdPvpc3gqoujwUErYA2+HKZrXSAplQCDf2u2nPsV1P3UHYCOUFENdCzluk2X770MAzRTKVz8jICq90gFecac76OfutgCYDME8AKt53uBqOmF/FszkmqCWqyI2J9AvGpuuJdEEx/pKGtMloUBTGl+Kl0eustR0FjrwLJH5HIcO1dl1YWgfSQMCypiqJoG8fgtjasddV1OHSsIthr4emUvgkJptmpyNbjaoLV7MWHKcBf5sSIKzk8ddZocz3+xNpmHtRe3v3P1kkMmo3zX9nA4bPMWUBBtp8jj5bcpJZRvljYIn/fUgCT6WpgsWwRbxO4XDlYJsV+umKja0c4r6V4DJGFdZ5JPDUTIq9gHiVdOCuVzpwKn1tsMU0GcHoLxOxF0BSAPH794GQ7h/2gqjQTsCYXW3uucm2/SDK3iJHAsNCawsTwptfMzafXd5Eyv0C22yAwvgSJ24X1j8xt4jLwct0chwaUGSGK+icJeC9e9/o7PU57MXtXFhZYVPkU= matth@DESKTOP-P0HSKC0
  
  placementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties: 
      SpreadLevel: rack
      Strategy: spread
  
  gitlabInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref instanceTemplate
        Version: !GetAtt instanceTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"
  
  instanceTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-instanceTemplate"
      VersionDescription: "1.0.0"
      LaunchTemplateData:
        ImageId: ami-084e8c05825742534
        InstanceType: t2.medium
        CreditSpecification:
          CpuCredits: standard
        DisableApiTermination: false # true = cannot shutdown via console, api or cli - extra safeguards?
        EbsOptimized: false # EBS I/O optimized
        InstanceInitiatedShutdownBehavior: stop # what to do when told to 'shutdown'
        Monitoring:
          Enabled: true
        KeyName: !Ref demoKey
        IamInstanceProfile:
          Arn: !GetAtt instanceProfile.Arn
        NetworkInterfaces:
          - DeviceIndex: 0
            DeleteOnTermination: true
            InterfaceType: interface
            SubnetId: !Ref subnetC
            Groups:
              - !Ref instanceSecurityGroup
            AssociatePublicIpAddress: true
        Placement:
          GroupName: !Ref placementGroup
          Tenancy: default
        MetadataOptions:
          HttpEndpoint: enabled # curl http://169.254.169.254/latest/meta-data/
          InstanceMetadataTags: enabled
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
        
            sudo yum -y update
        
            curl https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm -o amazon-cloudwatch-agent.rpm
            sudo yum install -y ./amazon-cloudwatch-agent.rpm
            
            # Create a configuration file for the agent
            sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json <<EOF
            {
              "region": "${AWS::Region}",
              "namespace": "{instance_id}",
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/messages",
                        "log_group_name": "${instanceTerminalLogs}",
                        "log_stream_name": "{instance_id}"
                      },
                      {
                        "file_path": "/var/log/gitlab/nginx/gitlab_access.log",
                        "log_group_name": "${instanceAccessLogs}",
                        "log_stream_name": "{instance_id}"
                      }
                    ]
                  }
                }
              }
            }
            EOF
            # Start and enable the agent
            sudo systemctl start amazon-cloudwatch-agent
            sudo systemctl enable amazon-cloudwatch-agent
            ########################################################################
            
            cd /
            sudo su

            IS_DOMAIN_CONFIGURED=$(aws cloudformation --region ${AWS::Region} describe-stacks --stack-name ${AWS::StackName} --query "Stacks[0].Outputs[?OutputKey=='IsDomainConfigured'].OutputValue" --output text)
            echo "IS_DOMAIN_CONFIGURED: $IS_DOMAIN_CONFIGURED"

            if [[ $IS_DOMAIN_CONFIGURED == "true" ]]; then
            #Domain configuration is enabled
            sudo curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash
            sudo EXTERNAL_URL="https://${subDomainName}.${domainName}" GITLAB_ROOT_PASSWORD="${gitlabRootPassword}" yum install -y gitlab-ce
            
            cd /etc/gitlab/
            
            sudo tee gitlab.rb <<EOF
            external_url 'https://${subDomainName}.${domainName}'
            letsencrypt['enable'] = false
            gitlab_rails['backup_upload_connection'] = {
              'provider' => 'AWS',
              'region' => '${AWS::Region}',
              'use_iam_profile' => true
             }
            gitlab_rails['backup_upload_remote_directory'] = '${backupBucket}'
            gitlab_rails['backup_multipart_chunk_size'] = 104857600
            EOF
            else
            # Domain configuration is not enabled
            sudo curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash
            sudo GITLAB_ROOT_PASSWORD="${gitlabRootPassword}" yum install -y gitlab-ce
            cd /etc/gitlab/
            sudo tee gitlab.rb <<EOF
            gitlab_rails['backup_upload_connection'] = {
              'provider' => 'AWS',
              'region' => '${AWS::Region}',
              'use_iam_profile' => true
             }
            gitlab_rails['backup_upload_remote_directory'] = '${backupBucket}'
            gitlab_rails['backup_multipart_chunk_size'] = 104857600
            EOF
            sudo gitlab-ctl reconfigure
            fi
            
            sudo gitlab-ctl reconfigure
            
            # sudo gitlab-rake gitlab:backup:create
    DependsOn:
      - instanceTerminalLogs
      - instanceAccessLogs
  
  instanceTerminalLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/aws/ec2/, !Sub "${AWS::StackName}-terminal"]]
  
  instanceAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/aws/ec2/, !Sub "${AWS::StackName}-access-log"]]
  
  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: !Sub "${AWS::StackName}-LB"
      IpAddressType: ipv4
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LBSecurityGroup
      Subnets: # 2 subnets needed
        - !Ref subnetC
        - !Ref subnetB
  
  HTTPlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HTTPtargetGroup
      LoadBalancerArn: !Ref loadBalancer
  
  HTTPtargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-LB-HTTP-TG"
      TargetType: instance
      IpAddressType: ipv4
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      VpcId: !Ref EC2vpc
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPort: "443"
      Targets:
        - Id: !Ref gitlabInstance
  
  HTTPSlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: IsDomainConfiguredCondition
    Properties:
      Port: 443
      Protocol: HTTPS
      Certificates: # overrides Gitlab's self-signed cert-
        - CertificateArn: !Ref domainCertArn
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref HTTPStargetGroup
      LoadBalancerArn: !Ref loadBalancer
  
  HTTPStargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: IsDomainConfiguredCondition
    Properties: 
      Name: !Sub "${AWS::StackName}-LB-HTTPS-TG"
      TargetType: instance
      IpAddressType: ipv4
      Port: 443
      Protocol: HTTPS
      ProtocolVersion: HTTP1
      VpcId: !Ref EC2vpc
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTPS
      HealthCheckPort: "443"
      Targets:
        - Id: !Ref gitlabInstance
  
  backupInstanceEvent:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      Name: !Sub "${AWS::StackName}-backup-eventRule"
      ScheduleExpression: cron(00 00 * * ? *) #every day at midnight
      State: ENABLED
      Targets:
        - Id: Ide17be754-5857-463f-a18e-8114bd9284e1
          Arn: !Join ['',[!Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/', !Ref preformGitlabBackupDoc]]
          RoleArn: !GetAtt gitlabInstanceRole.Arn
          RunCommandParameters:
            RunCommandTargets:
              - Key: InstanceIds
                Values:
                  - !Ref gitlabInstance
  
  preformGitlabBackupDoc:
    Type: "AWS::SSM::Document"
    Properties:
      Name: !Sub "${AWS::StackName}-preform-backup"
      VersionName: "1.0.0"
      TargetType: "/AWS::EC2::Instance"
      DocumentType: "Command"
      DocumentFormat: "JSON"
      Content:
        schemaVersion: "2.2"
        description: "preform a backup"
        mainSteps:
        - action: "aws:runShellScript"
          name: "backup"
          inputs:
            runCommand:
              - "gitlab-rake gitlab:backup:create"
              - !Sub "aws s3 cp /etc/gitlab/gitlab.rb s3://${backupBucket}"
              - !Sub "aws s3 cp /etc/gitlab/gitlab-secrets.json s3://${backupBucket}"
  
  gitlabRecord:
    Type: AWS::Route53::RecordSet
    Condition: IsDomainConfiguredCondition
    Properties:
      Name: !Sub "${subDomainName}.${domainName}"
      HostedZoneId: !Ref hostedZoneId
      Type: CNAME
      ResourceRecords:
        - !GetAtt loadBalancer.DNSName
      TTL: 300
  
Outputs:
  loadBalancerDNSname:
    Value: !GetAtt loadBalancer.DNSName
  # ROUTE 53 HOSTING CONFIG ############
  gitlabUrl:
    #Value: !Sub "https://${subDomainName}.${domainName}"
    Value: !If [IsDomainConfiguredCondition, !Sub "https://${subDomainName}.${domainName}", !GetAtt loadBalancer.DNSName]
  S3Backups:
    Value: !Ref backupBucket
  IsDomainConfigured:
    Value: !If [IsDomainConfiguredCondition, true, false]